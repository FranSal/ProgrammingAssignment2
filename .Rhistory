## MakeCasheMatrix takes a matrix object and makes a mirror copy of it
## that allow to store its value and inverse matrix.
##  set  first checks if the X argument is DIFFERENT ( !identical()) to a potentially stored value.
## if it's diferent it caches the new value on X and sets the iM( inverse matrix) to NULL if it's identical
## then it does nothing
## iM is the inverse matrix cache
## X is the cache to X argument
## get delivers X value back from the  X cache
## setinv stores the inverse matrix ( that is its argument X) to the iM cache
## getinv takes the cached value and returns it.
makeCacheMatrix <- function(X = matrix()) {
iM <- NULL
set <- function(Y) {
if(!identical(Y,X)){
X <<- Y
iM <<- NULL
}
}
get <- function() X
setinv <- function(X) iM <<- X
getinv <- function() iM
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## cachesSolve  takes the X argument and returns its inverse matrix.
## it first checks if the inverse matriz (iM) existe.
## if it does exist, then it recovers its value from cache
## if it's NULL then it calculates its value and stores it in its cache
## using setinv on its argument.
cacheSolve <- function(X, ...) {
## Return a matrix that is the inverse of 'x'
iM  <- X$getinv()
if(!is.null(iM)) {
message("getting cached data")
return(iM)
}
data <- X$get()
iM <- solve(data, ...)
X$setinv(iM)
iM
}
X <- matrix(1:4, 2,2)
makeCacheMatrix(X)
CX <-makeCacheMatrix(X)
cacheSolve(CX)
cacheSolve(CX)
get CX
CX$get
CX$get()
CX <- matrix(1:4,2,2)
cacheSolve(CX)
cacheSolve(CX)
CX <-makeCacheMatrix(X)
X <- matrix(1:4, 2,2)
CX <-makeCacheMatrix(X)
cacheSolve(CX)
cacheSolve(CX)
X <- matrix(1:4, 2,2)
CX <-makeCacheMatrix(X)
cacheSolve(CX)
cacheSolve(CX)
CX <-makeCacheMatrix(X)
cacheSolve(CX)
CX$set(X)
cacheSolve(CX)
X <- matrix(2:5,2,2)
CX$set(X)
cacheSolve(CX)
cacheSolve(CX)
